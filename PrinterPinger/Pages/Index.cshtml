@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<body>
    <style>
        .ipTableRow:hover {
            background-color: lightblue;
        }
    </style>

    @if (Model.IpAddresses.Any())
    {
        <br />
        <button type="button" class="btn btn-primary" id="startButton">Start Pinging</button>
        <button type="button" class="btn btn-danger" id="stopButton" style="display:none;">Stop Pinging</button>

        <div class="row">
            <div class="col-md-6">
                <canvas id="statusChart" width="300" height="300"></canvas>
            </div>
            <div class="col-md-6">
                <div class="scoreboard-container">
                    <div id="scoreboard" class="scoreboard">
                        <h4 class="scoreboard-title">Scoreboard</h4>
                        <div class="score-section green">
                            <span class="label">Online:</span>
                            <span id="greenScore" class="score-number">0</span>
                        </div>
                        <div class="score-section red">
                            <span class="label">Offline:</span>
                            <span id="redScore" class="score-number">0</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <table class="table table-hover" id="ipTable">
            <thead>
                <tr class="table table-secondary ipTableRow">
                    @foreach (var columnName in Model.IpAddresses.First().Keys)
                    {
                        <th>@columnName</th>
                    }
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ipAddressDict in Model.IpAddresses)
                {
                    <tr class="table-dark">
                        @foreach (var kvp in ipAddressDict)
                        {
                            <td>@kvp.Value</td>
                        }
                        <td></td>
                    </tr>
                }
            </tbody>
        </table>

        <form method="post" enctype="multipart/form-data">
            <input type="file" id="fileUpload" name="file" />
            <br />
            <button type="submit" class="btn btn-primary">Upload</button>
        </form>
    }
    else
    {
        <h1>Upload a file</h1>
        <br />
        <form method="post" enctype="multipart/form-data">
            <input type="file" id="fileUpload" name="file" />
            <br />
            <button type="submit" class="btn btn-primary">Upload</button>
        </form>
    }
</body>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var pinging = false;
    var intervalId;
    var successCount = 0;
    var failureCount = 0;

    var ctx = document.getElementById('statusChart').getContext('2d');
    var statusChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Success', 'Failure'],
            datasets: [{
                label: 'Status',
                data: [0, 0],
                backgroundColor: [
                    'green',
                    'red'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: false, // Disable responsiveness
            legend: {
                display: false // Hide legend
            },
            layout: {
                padding: 20 // Add padding
            }
        }
    });

    document.getElementById("startButton").addEventListener("click", function () {
        pinging = true;
        document.getElementById("startButton").style.display = "none";
        document.getElementById("stopButton").style.display = "block";
        intervalId = setInterval(pingAllIpAddresses, 1000);
    });

    document.getElementById("stopButton").addEventListener("click", function () {
        pinging = false;
        document.getElementById("startButton").style.display = "block";
        document.getElementById("stopButton").style.display = "none";
        clearInterval(intervalId);
    });

    function pingAllIpAddresses() {
        var rows = document.getElementById("ipTable").getElementsByTagName("tbody")[0].rows;
        successCount = 0;
        failureCount = 0;
        for (var i = 0; i < rows.length; i++) {
            var ipAddress = rows[i].cells[1].innerText;
            var statusCell = rows[i].cells[2]; // Get the status cell
            pingIpAddress(ipAddress, statusCell);
        }
    }

    function pingIpAddress(ipAddress, statusCell) {
        fetch('/Index?handler=Ping&ipAddress=' + ipAddress)
            .then(response => response.text())
            .then(data => {
                statusCell.innerText = data; // Display ping status in the status cell
                statusCell.style.backgroundColor = (data.trim().toLowerCase() === "success") ? "green" : "red";
                updateChart();
            });
    }

    function updateChart() {
        var greenNum = 0;
        var redNum = 0;
        var rows = document.getElementById("ipTable").getElementsByTagName("tbody")[0].rows;

        for (var i = 0; i < rows.length; i++) {
            var color = rows[i].cells[2].style.backgroundColor;
            if (color === 'green') {
                greenNum++;
            } else if (color === 'red') {
                redNum++;
            }
        }

        var totalGreen = document.getElementById("greenScore");
        var totalRed = document.getElementById("redScore");
        totalGreen.textContent = greenNum;
        totalRed.textContent = redNum;

        // Update data for the pie chart
        statusChart.data.datasets[0].data = [greenNum, redNum];
        statusChart.update();
    }

    document.addEventListener("DOMContentLoaded", function () {
        var rows = document.querySelectorAll(".ipTableRow");

        rows.forEach(function (row) {
            row.addEventListener("mouseenter", function () {
                this.classList.add("ipTableRowHover");
            });

            row.addEventListener("mouseleave", function () {
                this.classList.remove("ipTableRowHover");
            });
        });
    });
</script>

<style>
    .scoreboard-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
    }

    .scoreboard {
        background-color: #ddd; /* Color of the scoreboard roof */
        padding: 10px;
        border-radius: 10px;
        z-index: 1; /* Ensure scoreboard is on top */
        width: 180px; /* Adjust the width of each scoreboard */
    }

    .scoreboard-title {
        text-align: center;
        margin: 0;
        font-size: 16px;
    }

    .score-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        margin-top: 10px;
        font-size: 16px;
        font-weight: bold;
    }

        .score-section .label {
            flex-grow: 1;
        }

    .score-number {
        color: black;
    }

    .green {
        background-color: #4caf50;
    }

    .red {
        background-color: #f44336;
    }

</style>
